use std::net::{TcpStream};                          //使用net中TcpStream类
use std::io::{Read, Write};                         //使用io库的Read, Write
use std::str::from_utf8;                            //使用字符串的from_utf8函数

fn main() {                                         //主函
    match TcpStream::connect("localhost:3333") {    //连接本机3333端口
        Ok(mut stream) => {                         //正常情况下
            println!("Successfully connected to server in port 3333");      //打印连接成功信息

            let msg = b"Hello!";                    //msg变量赋字符串

            stream.write(msg).unwrap();             //将字符串信息写入流
            println!("Sent Hello, awaiting reply...");      //打印信息，提示客户端用户等待服务端响应

            let mut data = [0 as u8; 6]; // using 6 byte buffer     //data赋值6字节的元组
            match stream.read_exact(&mut data) {                    //提取服务端返回信息至data
                Ok(_) => {                                          //正常情况下
                    if &data == msg {                               //如果data与msg相同。
                        println!("Reply is ok!");                   //则打印应答成功
                    } else {                                        //否则 
                        let text = from_utf8(&data).unwrap();       //按uft8编码data内容，并赋值给text
                        println!("Unexpected reply: {}", text);     //打印非期望反馈的内容
                    }
                },
                Err(e) => {                                         //读取异常
                    println!("Failed to receive data: {}", e);      //打印异常信息
                }
            }
        },
        Err(e) => {                                                 //连接异常
            println!("Failed to connect: {}", e);                   //打印连接异常信息
        }
    }
    println!("Terminated.");                                        //结束客户端运行
}
