use std::thread;                        //使用thread线程
use std::net::{TcpListener, TcpStream, Shutdown};       //使用网络库的TcpListener, TcpStream, Shutdown类型
use std::io::{Read, Write};             //使用io库的读、写

/**
** 客户端请求处理
**/
fn handle_client(mut stream: TcpStream) {           
    let mut data = [0 as u8; 50]; // using 50 byte buffer
    while match stream.read(&mut data) {        //循环，将流读入data
        Ok(size) => {                           //size是否有值
            // echo everything!
            stream.write(&data[0..size]).unwrap();  //数据流写入da
            true                                    //返回true
        },
        Err(_) => { //捕捉错误
            println!("An error occurred, terminating connection with {}", stream.peer_addr().unwrap());  //打印错误消息
            stream.shutdown(Shutdown::Both).unwrap();   //关注流
            false                                       //返回false
        }
    } {}
}

/**
*主函数
**/
fn main() {
    let listener = TcpListener::bind("0.0.0.0:3333").unwrap();                  //添加监听器
    // accept connections and process them, spawning a new thread for each one
    println!("Server listening on port 3333");                                  //打印服务器监听端口3333
    for stream in listener.incoming() {                                         //监听器输入流循环
        match stream {                                                          //匹配
            Ok(stream) => {                                                     //正确
                println!("New connection: {}", stream.peer_addr().unwrap());    //打印：
                thread::spawn(move|| {                                          //线程执行spawn
                    // connection succeeded
                    handle_client(stream)                                       //调用 客户端信息 处理函数
                });
            }
            Err(e) => {                                                         //错误
                println!("Error: {}", e);                                       //打印异常信息
                /* connection failed */
            }
        }
    }
    // close the socket server
    drop(listener);                                                             //释放监听器
}
